pragma cashscript ^0.11.0;

/**
 * @param inactivityExpiryTime The time period after which the domain is considered inactive.
 * @param name The name of the domain.
 * @param domainCategory The category of the domain.
 */
contract Domain(
  int inactivityExpiryTime,
  bytes name,
  bytes domainCategory
  ) {
  
  /**
   * This function can be used to perform a variety of actions.
   *
   * For example:
   * - It can be used to prove the the ownership of the domain by other contracts.
   * - This function allows the owner to perform any actions in conjunction with other contracts.
   * - This function can be used to add records and invalidate multiple records in a single transaction.
   *
   * Records are created using OP_RETURN outputs. To add a record, include the record data directly in the OP_RETURN output.
   * To invalidate a record, prefix "RMV" followed by the hash of the record content in the OP_RETURN output. This will signal
   * the library/indexers to exclude the record from the valid records.
   * 
   * @inputs
   * - Inputx: Internal/External Auth NFT
   * - Inputx+1 (optional): Domain ownership NFT from the owner
   * 
   * @outputs
   * - Outputx: Internal/External Auth NFT returned to this contract
   * - Outputx+1 (optional): Domain NFT returned
   * 
   */
  function useAuth(int authID) {
    // The activeInputIndex can be anything as long as the utxo properties are preserved and comes back to the
    // contract without alteration.
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
    require(tx.inputs[this.activeInputIndex].tokenCategory == domainCategory);
    require(tx.outputs[this.activeInputIndex].tokenCategory == domainCategory);
    require(tx.inputs[this.activeInputIndex].nftCommitment == tx.outputs[this.activeInputIndex].nftCommitment);

    if(authID == 1) {
      // The next input from the InternalAuthNFT must be the ownershipNFT.
      require(tx.inputs[this.activeInputIndex + 1].tokenCategory == domainCategory);
      bytes registrationId, bytes nameFromOwnerNFT = tx.inputs[this.activeInputIndex + 1].nftCommitment.split(8);
      require(nameFromOwnerNFT == name);
      require(tx.inputs[this.activeInputIndex].nftCommitment == registrationId);
    } else {
      // One known use of ExternalAuthNFT in the `DomainOwnershipGuard` contract. ExternalAuthNFT is
      // used to prove that an owner exists.
      require(tx.inputs[this.activeInputIndex].nftCommitment == 0x);
    }
  }

  /**
   * If the incentive system fails, i.e `DomainOwnershipGuard` or `AuctionConflictResolver` fails to prevent a
   * a owner conflict. When this happens there will be > 1 owner for this domain.
   * The owner with the lowest registrationID must be the only owner for this domain.
   * To help enforce this rule, this function will allow anyone to burn both the Auth NFTs of the NEW owner.
   *
   * @inputs
   * - Input0: Valid External Auth NFT from self
   * - Input1: Valid Internal Auth NFT from self
   * - Input2: Invalid External Auth NFT from self
   * - Input3: Invalid Internal Auth NFT from self
   * - Input4: BCH input from anyone
   * 
   * @outputs  
   * - Output0: Valid External Auth NFT back to self
   * - Output1: Valid Internal Auth NFT back to self
   * - Output3: BCH change output
   */
  // function resolveOwnerConflict(){
  //   require(tx.inputs.length == 5);
  //   require(tx.outputs.length == 3);

  //   // Pure BCH input and output to fund the transaction
  //   require(tx.inputs[4].tokenCategory == 0x);
  //   require(tx.outputs[2].tokenCategory == 0x);

  //   bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;
  //   require(tx.inputs[0].lockingBytecode == selfLockingBytecode);
  //   require(tx.inputs[1].lockingBytecode == selfLockingBytecode);
  //   require(tx.inputs[2].lockingBytecode == selfLockingBytecode);
  //   require(tx.inputs[3].lockingBytecode == selfLockingBytecode);

  //   require(tx.outputs[0].lockingBytecode == selfLockingBytecode);
  //   require(tx.outputs[1].lockingBytecode == selfLockingBytecode);

  //   // External Auth NFTs
  //   require(tx.inputs[0].nftCommitment == 0x);
  //   require(tx.inputs[2].nftCommitment == 0x);

  //   // Commitments of Valid Auth NFts back to self
  //   require(tx.outputs[0].nftCommitment == 0x);
  //   require(tx.outputs[1].nftCommitment == tx.inputs[1].nftCommitment);

  //   // Ensure that all the token inputs and outputs have domainCategory
  //   require(tx.inputs[0].tokenCategory == domainCategory);
  //   require(tx.inputs[1].tokenCategory == domainCategory);
  //   require(tx.inputs[2].tokenCategory == domainCategory);
  //   require(tx.inputs[3].tokenCategory == domainCategory);

  //   require(tx.outputs[0].tokenCategory == domainCategory);
  //   require(tx.outputs[1].tokenCategory == domainCategory);

  //   // Compare the registrationID
  //   require(int(tx.inputs[1].nftCommitment.reverse()) < int(tx.inputs[3].nftCommitment.reverse()));
  // }

  /**
   * Allows the domain owner or anyone to burn the InternalAuthNFT and externalAuthNFT making this domain available
   * for auction.
   * 
   * - Owner can burn the AuthNFTs anytime.
   * - External party can burn the AuthNFTs when the internalAuth NFT has not been used for more than `inactivityExpiryTime`.
   *
   * @inputs
   * - Input0: External Auth NFT
   * - Input1: Internal Auth NFT
   * - Input2: Pure BCH or Domain ownership NFT from the owner
   *
   * @outputs 
   * - Output0: BCH change
   *
   */
  function burn() {
    require(tx.version == 2);
    require(tx.inputs.length == 3);
    require(tx.outputs.length == 1);

    // If an external party is attempting to burn the authNFTs
    if (tx.inputs[2].tokenCategory == 0x) {
      // If pure BCH input, then allow anyone to burn given the time limit has passed.
      require(tx.inputs[1].sequenceNumber == inactivityExpiryTime);
    } else {
      // If domain ownership NFT input, then allow the owner to burn anytime.
      require(tx.inputs[2].tokenCategory == domainCategory);
      // Make sure that the registrationID in the domainOwnershipNFT and the internalAuthNFT are the same.
      require(tx.inputs[2].nftCommitment.split(8)[0] == tx.inputs[0].nftCommitment);
    }

    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;
    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);
    require(tx.inputs[1].lockingBytecode == selfLockingBytecode);

    // ExternalAuthNFT
    require(tx.inputs[0].nftCommitment == 0x);
    // Both InternalAuthNFT and externalAuthNFT are immutable and have the same tokenCategory
    require(tx.inputs[0].tokenCategory == tx.inputs[1].tokenCategory);
    require(tx.inputs[0].tokenCategory == domainCategory);
    require(tx.inputs[1].tokenCategory == domainCategory);

    // Return the BCH as change.
    require(tx.outputs[0].tokenCategory == 0x);
  }
}
