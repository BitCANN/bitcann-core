pragma cashscript ^0.11.0;

contract Accumulator() {
  /**
   * Once enough auctions have happened, there might come a time when the counterNFT's tokenAmount is not enough.
   * Since the amount would be accumulating in the thread NFTs, this function can be used to transfer them back to the
   * Counter NFT to keep the system functioning smoothly.
   * 
   * @inputs
   * - Input0: Registry Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract
   * - Input2: Minting CounterNFT + tokenAmount from Registry Contract
   * - Input3: authorizedThreadNFT with tokenAmount from Registry Contract
   * - Input4: Pure BCH
   * 
   * @outputs
   * - Output0: Registry Contract's thread NFT back to the Registry contract.
   * - Output1: Input1 back to this contract without any change.
   * - Output2: Minting CounterNFT back to the Registry contract + tokenAmount
   * - Output3: authorizedThreadNFT without tokenAmount back to the Registry contract
   * - Output4: Change BCH
   */
  function call(){
    require(tx.inputs.length == 5);
    require(tx.outputs.length == 5);

    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
    // Restriction on output category is important as minting NFT is used in this transaction.
    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);

    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will
    // be manipulating their own utxos.
    bytes registryInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == registryInputLockingBytecode);
    require(tx.inputs[3].lockingBytecode == registryInputLockingBytecode);

    require(tx.outputs[2].lockingBytecode == registryInputLockingBytecode);
    require(tx.outputs[3].lockingBytecode == registryInputLockingBytecode);

    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);
    require(tx.outputs[3].tokenCategory == tx.inputs[3].tokenCategory);

    bytes registryInputCategory = tx.inputs[0].tokenCategory;
    
    // authorizedThreadNFTs are immutable
    require(tx.inputs[3].tokenCategory == registryInputCategory);
    
    bytes counterCategory, bytes counterCapability = tx.inputs[2].tokenCategory.split(32);
    require(counterCategory == registryInputCategory);
    require(counterCapability == 0x02); // Minting

    // Locking bytecode of the authorized contract is 35 bytes long.
    require(tx.inputs[3].nftCommitment.length == 35);

    // Since the nftCommitment of counterNFT is registrationID so it must not be null
    // as the DomainMintingNFT has no nftCommitment nor tokenAmount
    require(tx.inputs[2].nftCommitment != 0x);
    require(tx.inputs[2].tokenAmount > 0); // Ensure that the counter minting NFT is used.
    require(tx.outputs[2].tokenAmount == tx.inputs[2].tokenAmount + tx.inputs[3].tokenAmount);

    // Pure BCH input and output.
    require(tx.inputs[4].tokenCategory == 0x);
    require(tx.outputs[4].tokenCategory == 0x);
  }
}