pragma cashscript ^0.11.0;

contract AuctionNameEnforcer() {
  /**
   * Proves that a domain name contains invalid characters, burns the auctionNFT, and takes away the funds as a reward.
   * During the entire auction, this can be called at any time by anyone.
   * 
   * Rules:
   * 1. The name must consist of only these characters:
   *    - Letters (a-z or A-Z)
   *    - Numbers (0-9)
   *    - Hyphens (-)
   *
   * @param characterNumber - Number of the character in the name that is invalid (starting from 1)
   *
   * @inputs
   * - Input0: Registry Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract.
   * - Input2: auctionNFT from Registry Contract.
   *
   * @outputs
   * - Output0: Registry Contract's authorizedThreadNFT back to the Registry contract.
   * - Output1: Input1 back to this contract without any change.
   * - Output2: Reward to caller.
   *
   */
  function call(int characterNumber) {
    require(tx.inputs.length == 3);
    require(tx.outputs.length == 3);

    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);

    // Lock this contract to only be used with the registry type contract.
    bytes registryInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == registryInputLockingBytecode);

    // All the token categories in the transaction should be the same.
    bytes registryInputCategory = tx.inputs[0].tokenCategory;

    // AuctionNFT should be mutable and of the 'domainCategory' i.e registryInputCategory
    bytes auctionCategory, bytes auctionCapability = tx.inputs[2].tokenCategory.split(32);
    require(auctionCategory == registryInputCategory);
    require(auctionCapability == 0x01); // Mutable

    bytes name = tx.inputs[2].nftCommitment.split(20)[1];
    bytes characterSplitBytes = name.split(characterNumber)[0];
    characterNumber = characterNumber - 1;
    bytes character = characterSplitBytes.split(characterNumber)[1];
    int charVal = int(character);

    // Character is not a hyphen.
    require(charVal != 45); 
    // Character is not from a-z.
    require(!within(charVal, 97, 123));
    // Character is not from A-Z.
    require(!within(charVal, 65, 91));
    // Character is not from 0-9.
    require(!within(charVal, 48, 58));

    // tokenAmount from the invalid auctionNFT goes to the authorizedThreadNFT to be accumulated later
    // and merged back with the CounterNFT using the `Accumulator` Contract
    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[2].tokenAmount);

    // Pure BCH.
    require(tx.outputs[2].tokenCategory == 0x);
  }
}