{
  "contractName": "DomainFactory",
  "constructorInputs": [
    {
      "name": "domainContractBytecode",
      "type": "bytes"
    },
    {
      "name": "minWaitTime",
      "type": "int"
    },
    {
      "name": "maxPlatformFeePercentage",
      "type": "int"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": []
    }
  ],
  "bytecode": "OP_TXVERSION OP_2 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOVALUE OP_INPUTINDEX OP_OUTPUTVALUE OP_NUMEQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_OUTPUTTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_2 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_2 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENAMOUNT OP_2 OP_UTXOTOKENAMOUNT OP_NUMEQUALVERIFY OP_2 OP_OUTPUTTOKENAMOUNT OP_0 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTVALUE OP_2 OP_UTXOVALUE OP_NUMEQUALVERIFY OP_3 OP_INPUTSEQUENCENUMBER OP_3 OP_ROLL OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT 14 OP_SPLIT OP_DUP OP_SIZE OP_NIP 20 OP_4 OP_ROLL OP_CAT OP_SWAP OP_CAT OP_OVER OP_CAT OP_3 OP_ROLL OP_CAT OP_HASH256 aa20 OP_SWAP OP_CAT 87 OP_CAT OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_3 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_8 OP_NUM2BIN OP_REVERSEBYTES OP_4 OP_OUTPUTTOKENCOMMITMENT OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_SWAP OP_ROT OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTBYTECODE 76a914 OP_ROT OP_CAT 88ac OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_UTXOTOKENAMOUNT OP_3 OP_UTXOTOKENAMOUNT OP_ADD OP_NUMEQUALVERIFY OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_6 OP_OUTPUTVALUE OP_3 OP_UTXOVALUE 64 OP_DIV OP_ROT OP_MUL OP_LESSTHANOREQUAL",
  "source": "pragma cashscript ^0.11.0;\n\n/**\n * @param domainContractBytecode - Partial bytecode of the domain contract\n * @param minWaitTime - Minimum wait time to consider an auction ended\n * @param maxPlatformFeePercentage - Maximum platform fee percentage\n */\ncontract DomainFactory(\n  bytes domainContractBytecode,\n  int minWaitTime,\n  int maxPlatformFeePercentage\n) {\n  /**\n   * This function finalizes a domain registration auction by:\n   * - Verifying the auction has ended and the winner's bid is valid\n   * - Issuing an immutable externalAuthNFT to the Domain Contract\n   * - Issuing an immutable internalAuthNFT to the Domain Contract\n   * - Issuing an immutable domain NFT to the auction winner\n   * - Distributing auction fees between the platform and miners\n   * - Burning the auctionNFT\n   *\n   * @inputs\n   * - Input0: Registry Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract\n   * - Input2: DomainMintingNFT from the Registry Contract\n   * - Input3: auctionNFT from the Registry Contract\n   *\n   * @outputs\n   * - Output0: Registry Contract's authorizedThreadNFT back to the Registry contract.\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: DomainMintingNFT back to the Registry contract\n   * - Output3: External Auth NFT to the domain contract\n   * - Output4: Internal Auth NFT to the domain contract\n   * - Output5: Domain NFT to the auction winner\n   * - Output6: Platform fee (only for the first 4 years)\n   *\n   */\n  function call(){\n    require(tx.version == 2);\n    require(tx.inputs.length == 4);\n    require(tx.outputs.length == 7);\n\n    // This contract can only be used at input1 and it should return to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the domainCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n    // Strict value checks to ensure the platform and miner get fee.\n    require(tx.inputs[this.activeInputIndex].value == tx.outputs[this.activeInputIndex].value);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes registryInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == registryInputLockingBytecode);\n    require(tx.inputs[3].lockingBytecode == registryInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == registryInputLockingBytecode);\n\n    // All the token categories in the transaction should be the same.\n    bytes registryInputCategory = tx.inputs[0].tokenCategory;\n    require(tx.outputs[3].tokenCategory == registryInputCategory);\n    require(tx.outputs[4].tokenCategory == registryInputCategory);\n    require(tx.outputs[5].tokenCategory == registryInputCategory);\n\n    // DomainMintingNFT should be minting and of the 'domainCategory' i.e registryInputCategory\n    bytes domainMintingCategory, bytes domainMintingCapability = tx.inputs[2].tokenCategory.split(32);\n    require(domainMintingCategory == registryInputCategory);\n    require(domainMintingCapability == 0x02); // Mutable\n    // DomainMintingNFT should keep the same category and capability\n    require(tx.inputs[2].tokenCategory == tx.outputs[2].tokenCategory);\n\n    // AuctionNFT should be mutable and of the 'domainCategory' i.e registryInputCategory\n    bytes auctionCategory, bytes auctionCapability = tx.inputs[3].tokenCategory.split(32);\n    require(auctionCategory == registryInputCategory);\n    require(auctionCapability == 0x01); // Mutable\n\n    // Enforce strict restrictions on DomainMintingNFT\n    require(tx.inputs[2].nftCommitment == tx.outputs[2].nftCommitment);\n    // DomainMintingNFT has no nftCommitment\n    require(tx.outputs[2].nftCommitment == 0x);\n    // DomainMintingNFT has no tokenAmount\n    require(tx.outputs[2].tokenAmount == tx.inputs[2].tokenAmount);\n    require(tx.outputs[2].tokenAmount == 0);\n\n    // Strict value check\n    require(tx.outputs[2].value == tx.inputs[2].value);\n\n    // Enforcing the relative timelock, the auctionNFT must be atleast `minWaitTime` old\n    // to be considered ended.\n    require(tx.inputs[3].sequenceNumber == minWaitTime);\n\n    // Extract the PKH and name from the auctionNFT\n    bytes20 bidderPKH, bytes name = tx.inputs[3].nftCommitment.split(20);\n    \n    // Get the name length to generate the complete bytecode of the domain contract\n    int nameLength = name.length;\n    // category + name + bytecode.\n    // Note: `inactivityExpiryTime` in the domain is already added to the domainContractBytecode in the constructor.\n    bytes domainBytecode = 0x20 + registryInputCategory + bytes(nameLength) + name + domainContractBytecode;\n    bytes32 scriptHash = hash256(domainBytecode);\n    bytes35 domainLockingBytecode = new LockingBytecodeP2SH32(scriptHash);\n    \n    // ExternalAuthNFT goes to the domain contract\n    require(tx.outputs[3].lockingBytecode == domainLockingBytecode);\n    // InternalAuthNFT goes to the domain contract\n    require(tx.outputs[4].lockingBytecode == domainLockingBytecode);\n    \n    // ExternalAuthNFT does not have any commitment\n    require(tx.outputs[3].nftCommitment == 0x);\n    // Strict value check\n    require(tx.outputs[3].value == 1000);\n\n    // InternalAuthNFT has registrationID as the commitment so it can be used to authenticate\n    // along with the ownershipNFT\n    bytes8 registrationId = bytes8(tx.inputs[3].tokenAmount).reverse();\n    require(tx.outputs[4].nftCommitment == registrationId);\n    // Strict value check\n    require(tx.outputs[4].value == 1000);\n\n    // Send the domain ownership NFT to the bidder\n    require(tx.outputs[5].nftCommitment == registrationId + name);\n    require(tx.outputs[5].lockingBytecode == new LockingBytecodeP2PKH(bidderPKH));\n    require(tx.outputs[5].value == 1000);\n\n    // tokenAmount from the auctionNFT goes to the authorizedThreadNFT to be accumulated later\n    // and merged back with the CounterNFT using the `Accumulator` Contract\n    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[3].tokenAmount);\n\n    // Output can be added by anyone (Mainly platforms)\n    require(tx.outputs[6].tokenCategory == 0x);\n    // Enforce that the other piece of the fee goes to the miners.\n    require(tx.outputs[6].value <= (tx.inputs[3].value / 100) * maxPlatformFeePercentage);\n  }\n\n}",
  "debug": {
    "bytecode": "c2529c69c3549c69c4579c69c0519c69c0c7c0cd8769c0d1008769c0c6c0cc9c6900c752c75179876953c75179876952cd517a876900ce53d15179876954d15179876955d15179876952ce01207f517a52798769007a52876952ce52d1876953ce01207f517a52798769007a51876952cf52d2876952d200876952d352d09c6952d3009c6952cc52c69c6953cb537a9c6953cf01147f007982770120547a7e517a7e51797e537a7e007aaa02aa20517a7e01877e53cd5179876954cd517a876953d200876953cc02e8039c6953d05880bc54d25179876954cc02e8039c6955d2517a527a7e876955cd0376a914527a7e0288ac7e876955cc02e8039c6900d300d053d0939c6956d100876956cc53c6016496527a95a1",
    "sourceMap": "39:12:39:22;:26::27;:12:::1;:4::29;40:12:40:28:0;:32::33;:12:::1;:4::35;41:12:41:29:0;:33::34;:12:::1;:4::36;44:12:44:33:0;:37::38;:12:::1;:4::40;45:22:45:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;47:23:47:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;49:22:49:43:0;:12::50:1;:65::86:0;:54::93:1;:12;:4::95;55:51:55:52:0;:41::69:1;56:22:56:23:0;:12::40:1;:44::72:0;;:12:::1;:4::74;57:22:57:23:0;:12::40:1;:44::72:0;;:12:::1;:4::74;58:23:58:24:0;:12::41:1;:45::73:0;;:12:::1;:4::75;61:44:61:45:0;:34::60:1;62:23:62:24:0;:12::39:1;:43::64:0;;:12:::1;:4::66;63:23:63:24:0;:12::39:1;:43::64:0;;:12:::1;:4::66;64:23:64:24:0;:12::39:1;:43::64:0;;:12:::1;:4::66;67:75:67:76:0;:65::91:1;:98::100:0;:65::101:1;68:12:68:33:0;;:37::58;;:12:::1;:4::60;69:12:69:35:0;;:39::43;:12:::1;:4::45;71:22:71:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;74:63:74:64:0;:53::79:1;:86::88:0;:53::89:1;75:12:75:27:0;;:31::52;;:12:::1;:4::54;76:12:76:29:0;;:33::37;:12:::1;:4::39;79:22:79:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;81:23:81:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;83:23:83:24:0;:12::37:1;:51::52:0;:41::65:1;:12;:4::67;84:23:84:24:0;:12::37:1;:41::42:0;:12:::1;:4::44;87:23:87:24:0;:12::31:1;:45::46:0;:35::53:1;:12;:4::55;91:22:91:23:0;:12::39:1;:43::54:0;;:12:::1;:4::56;94:46:94:47:0;:36::62:1;:69::71:0;:36::72:1;97:21:97:25:0;;:::32:1;;100:27:100:31:0;:34::55;;:27:::1;:64::74:0;;:27::75:1;:78::82:0;;:27:::1;:85::107:0;;:27:::1;101:33:101:47:0;;:25::48:1;102:36:102:73:0;:62::72;;:36::73:1;;;105:23:105:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;107:23:107:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;110:23:110:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;112:23:112:24:0;:12::31:1;:35::39:0;:12:::1;:4::41;116:45:116:46:0;:35::59:1;:28::60;;:::70;117:23:117:24:0;:12::39:1;:43::57:0;;:12:::1;:4::59;119:23:119:24:0;:12::31:1;:35::39:0;:12:::1;:4::41;122:23:122:24:0;:12::39:1;:43::57:0;;:60::64;;:43:::1;:12;:4::66;123:23:123:24:0;:12::41:1;:45::80:0;:70::79;;:45::80:1;;;:12;:4::82;124:23:124:24:0;:12::31:1;:35::39:0;:12:::1;:4::41;128:23:128:24:0;:12::37:1;:51::52:0;:41::65:1;:78::79:0;:68::92:1;:41;:12;:4::94;131:23:131:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;133:23:133:24:0;:12::31:1;:46::47:0;:36::54:1;:57::60:0;:36:::1;:64::88:0;;:35:::1;:12",
    "logs": [],
    "requires": [
      {
        "ip": 6,
        "line": 39
      },
      {
        "ip": 10,
        "line": 40
      },
      {
        "ip": 14,
        "line": 41
      },
      {
        "ip": 18,
        "line": 44
      },
      {
        "ip": 24,
        "line": 45
      },
      {
        "ip": 29,
        "line": 47
      },
      {
        "ip": 35,
        "line": 49
      },
      {
        "ip": 43,
        "line": 56
      },
      {
        "ip": 49,
        "line": 57
      },
      {
        "ip": 55,
        "line": 58
      },
      {
        "ip": 63,
        "line": 62
      },
      {
        "ip": 69,
        "line": 63
      },
      {
        "ip": 75,
        "line": 64
      },
      {
        "ip": 85,
        "line": 68
      },
      {
        "ip": 90,
        "line": 69
      },
      {
        "ip": 96,
        "line": 71
      },
      {
        "ip": 106,
        "line": 75
      },
      {
        "ip": 111,
        "line": 76
      },
      {
        "ip": 117,
        "line": 79
      },
      {
        "ip": 122,
        "line": 81
      },
      {
        "ip": 128,
        "line": 83
      },
      {
        "ip": 133,
        "line": 84
      },
      {
        "ip": 139,
        "line": 87
      },
      {
        "ip": 145,
        "line": 91
      },
      {
        "ip": 181,
        "line": 105
      },
      {
        "ip": 187,
        "line": 107
      },
      {
        "ip": 192,
        "line": 110
      },
      {
        "ip": 197,
        "line": 112
      },
      {
        "ip": 208,
        "line": 117
      },
      {
        "ip": 213,
        "line": 119
      },
      {
        "ip": 222,
        "line": 122
      },
      {
        "ip": 232,
        "line": 123
      },
      {
        "ip": 237,
        "line": 124
      },
      {
        "ip": 246,
        "line": 128
      },
      {
        "ip": 251,
        "line": 131
      },
      {
        "ip": 262,
        "line": 133
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.3"
  },
  "updatedAt": "2025-04-14T10:50:55.157Z"
}